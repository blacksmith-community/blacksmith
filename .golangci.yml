# golangci-lint v2 configuration
version: "2"

# Run configuration
run:
  timeout: 5m
  tests: true

# Linters configuration
linters:
  enable:
  #- arangolint # Opinionated best practices for arangodb client.
  - asasalint # Check for pass []any as any in variadic func(...any).
  - asciicheck # Checks that all code identifiers does not have non-ASCII symbols in the name. [fast]
  - bidichk # Checks for dangerous unicode character sequences. [fast]
  - bodyclose # Checks whether HTTP response body is closed successfully.
  - canonicalheader # Canonicalheader checks whether net/http.Header uses canonical header. [auto-fix]
  - containedctx # Containedctx is a linter that detects struct contained context.Context field.
  - contextcheck # Check whether the function uses a non-inherited context.
  - copyloopvar # A linter detects places where loop variables are copied. [fast, auto-fix]
  - cyclop # Checks function and package cyclomatic complexity. [fast]
  - decorder # Check declaration order and count of types, constants, variables and functions. [fast]
  - dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f()). [fast]
  - dupl # Detects duplicate fragments of code. [fast]
  - dupword # Checks for duplicate words in the source code. [fast, auto-fix]
  - durationcheck # Check for two durations multiplied together.
  - embeddedstructfieldcheck # Embedded types should be at the top of the field list of a struct, and there must be an empty line separating embedded fields from regular fields. [fast]
  - err113 # Check errors handling expressions. [auto-fix]
  - errchkjson # Checks types passed to the json encoding functions. Reports unsupported types and reports occurrences where the check for the returned error can be omitted.
  - errname # Checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`.
  - errorlint # Find code that can cause problems with the error wrapping scheme introduced in Go 1.13. [auto-fix]
  - exhaustive # Check exhaustiveness of enum switch statements.
  - exptostd # Detects functions from golang.org/x/exp/ that can be replaced by std functions. [auto-fix]
  - fatcontext # Detects nested contexts in loops and function literals. [auto-fix]
  - forbidigo # Forbids identifiers.
  - forcetypeassert # Find forced type assertions.
  - funcorder # Checks the order of functions, methods, and constructors. [fast]
  - funlen # Checks for long functions. [fast]
  - ginkgolinter # Enforces standards of using ginkgo and gomega. [auto-fix]
  - gocheckcompilerdirectives # Checks that go compiler directive comments (//go:) are valid. [fast]
  - gochecknoglobals # Check that no global variables exist.
  - gochecknoinits # Checks that no init functions are present in Go code. [fast]
  - gochecksumtype # Run exhaustiveness checks on Go "sum types".
  - gocognit # Computes and checks the cognitive complexity of functions. [fast]
  - goconst # Finds repeated strings that could be replaced by a constant.
  - gocritic # Provides diagnostics that check for bugs, performance and style issues. [auto-fix]
  - gocyclo # Computes and checks the cyclomatic complexity of functions. [fast]
  - godot # Check if comments end in a period. [fast, auto-fix]
    #TODO: manually go through these- godox # Detects usage of FIXME, TODO and other keywords inside comments. [fast]
  - goheader # Check if file header matches to pattern. [fast, auto-fix]
  # - gomoddirectives # Disabled: We need the vault replace directive due to non-standard versioning
  - gomodguard # Allow and blocklist linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations. [fast]
  - goprintffuncname # Checks that printf-like functions are named with `f` at the end. [fast]
  - gosec # Inspects source code for security problems.
  - gosmopolitan # Report certain i18n/l10n anti-patterns in your Go codebase.
  - grouper # Analyze expression groups. [fast]
  - iface # Detect the incorrect use of interfaces, helping developers avoid interface pollution. [auto-fix]
  - importas # Enforces consistent import aliases. [auto-fix]
  - inamedparam # Reports interfaces with unnamed method parameters. [fast]
  - intrange # Intrange is a linter to find places where for loops could make use of an integer range. [auto-fix]
  - loggercheck # Checks key value pairs for common logger libraries (kitlog,klog,logr,slog,zap).
  - maintidx # Maintidx measures the maintainability index of each function. [fast]
  - makezero # Find slice declarations with non-zero initial length.
  - mirror # Reports wrong mirror patterns of bytes/strings usage. [auto-fix]
  - misspell # Finds commonly misspelled English words. [fast, auto-fix]
  - mnd # An analyzer to detect magic numbers. [fast]
  - musttag # Enforce field tags in (un)marshaled structs.
  - nakedret # Checks that functions with naked returns are not longer than a maximum size (can be zero). [fast, auto-fix]
  - nestif # Reports deeply nested if statements. [fast]
  - nilerr # Find the code that returns nil even if it checks that the error is not nil.
  - nilnesserr # Reports constructs that checks for err != nil, but returns a different nil value error.
  - nilnil # Checks that there is no simultaneous return of `nil` error and an invalid value.
  - nlreturn # Checks for a new line before return and branch statements to increase code clarity. [fast, auto-fix]
  - noctx # Detects function and method with missing usage of context.Context.
  - noinlineerr # Disallows inline error handling (`if err := ...; err != nil {`).
  - nonamedreturns # Reports all named returns.
  - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL. [fast]
  - paralleltest # Detects missing usage of t.Parallel() method in your Go test.
  - perfsprint # Checks that fmt.Sprintf can be replaced with a faster alternative. [auto-fix]
  - prealloc # Find slice declarations that could potentially be pre-allocated. [fast]
  - predeclared # Find code that shadows one of Go's predeclared identifiers. [fast]
  - promlinter # Check Prometheus metrics naming via promlint. [fast]
  - protogetter # Reports direct reads from proto message fields when getters should be used. [auto-fix]
  - reassign # Checks that package variables are not reassigned.
  - recvcheck # Checks for receiver type consistency.
  - rowserrcheck # Checks whether Rows.Err of rows is checked successfully.
  - sloglint # Ensure consistent code style when using log/slog. [auto-fix]
  - spancheck # Checks for mistakes with OpenTelemetry/Census spans.
  - sqlclosecheck # Checks that sql.Rows, sql.Stmt, sqlx.NamedStmt, pgx.Query are closed.
  - tagalign # Check that struct tags are well aligned. [fast, auto-fix]
  - testableexamples # Linter checks if examples are testable (have an expected output). [fast]
  - testifylint # Checks usage of github.com/stretchr/testify. [auto-fix]
  - testpackage # Linter that makes you use a separate _test package. [fast]
  - thelper # Thelper detects tests helpers which is not start with t.Helper() method.
  - tparallel # Tparallel detects inappropriate usage of t.Parallel() method in your Go test codes.
  - unconvert # Remove unnecessary type conversions.
  - unparam # Reports unused function parameters.
  - usestdlibvars # A linter that detect the possibility to use variables/constants from the Go standard library. [fast, auto-fix]
  - usetesting # Reports uses of functions with replacement inside the testing package. [auto-fix]
  - varnamelen # Checks that the length of a variable's name matches its scope.
  - wastedassign # Finds wasted assignment statements.
  - whitespace # Whitespace is a linter that checks for unnecessary newlines at the start and end of functions, if, for, etc. [fast, auto-fix]
  - wrapcheck # Checks that errors returned from external packages are wrapped.
  - wsl_v5 # Add or remove empty lines. [auto-fix]
  - zerologlint # Detects the wrong usage of `zerolog` that a user forgets to dispatch with `Send` or `Msg`.
  # This appears to cause issues: - exhaustruct # Checks if all structure fields are initialized.
  # - ireturn # Accept Interfaces, Return Concrete Types.
  # bs... - interfacebloat # A linter that checks the number of methods inside an interface. [fast]
  # - lll # Reports long lines. [fast]
  #- depguard # Go linter that checks if package imports are in a list of acceptable packages. [fast] # Disabled - needs configuration for this project
  # handled as separate make target: - revive # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint. [auto-fix]
  # no to camel case - tagliatelle # Checks the struct tags.
  # this doesn't work half the time, false positives or something : - nolintlint # Reports ill-formed or insufficient nolint directives. [fast, auto-fix]

  settings:
    cyclop:
      max-complexity: 16
      package-average: 0.0
    nestif:
      # Minimal complexity of if statements to report.
      # Default: 5
      min-complexity: 10

  # Exclude paths from linting
  exclusions:
    paths:
      - vendor
      - tmp

# Formatters configuration
formatters:
  # Exclude paths from formatting checks
  exclusions:
    paths:
      - vendor
      - tmp

# Issues configuration
issues:
  max-same-issues: 3
  exclude-rules:
    # Allow test suite global variables in test files
    - path: "_test\\.go$"
      linters:
        - gochecknoglobals
      text: "suite is a global variable"
    # Allow replace directives for vault due to non-semantic versioning
    - path: "^go\\.mod$"
      linters:
        - gomoddirectives
      text: "replacement are not allowed: github.com/hashicorp/vault"
    # Allow longer initialization functions
    - path: "pkg/testutil/vault_dev_server\\.go$"
      linters:
        - funlen
      source: "^func NewVaultDevServer"
