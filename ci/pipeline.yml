---
#
# ci/pipeline.yml
#
# Pipeline structure file for a Go Project pipeline
#
# DO NOT MAKE CHANGES TO THIS FILE.  Instead, modify
# ci/settings.yml and override what needs overridden.
# This uses spruce, so you have some options there.
#
# author:  James Hunt <james@niftylogic.com>
# created: 2016-03-30

meta:
  name:     (( param "Please name your pipeline" ))
  release:  (( concat meta.name " Release" ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  pipeline: (( grab meta.name ))

  git:
    email:  (( param "Please provide the git email for automated commits" ))
    name:   (( param "Please provide the git name for automated commits" ))

  go:
    version: 1.9
    module:  (( concat "github.com/" meta.github.owner "/" meta.github.repo ))
    static:  false

  image:
    name: starkandwayne/concourse-go
    tag: (( grab meta.go.version ))

  aws:
    bucket:     (( concat meta.pipeline "-pipeline" ))
    region_name: us-east-1
    access_key: (( param "Please set your AWS Access Key ID" ))
    secret_key: (( param "Please set your AWS Secret Key ID" ))

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token and specify it here" ))

  shout:
    topic:    (( concat meta.name "-pipeline" ))
    url:      (( param "Please specify the Shout! endpoint" ))
    username: (( param "Please specify the Shout! operations username" ))
    password: (( param "Please specify the Shout! operations password" ))

    metadata:
      build-team-name:     $BUILD_TEAM_NAME
      build-job-name:      $BUILD_JOB_NAME
      build-pipeline-name: $BUILD_PIPELINE_NAME

    links:
      pipeline: (( concat meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME" ))
      build:    (( concat meta.shout.links.pipeline "/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME" ))

  url: (( param "What is the URL for the Concourse instance this pipeline is located on?" ))

groups:
  - name: (( grab meta.pipeline ))
    jobs:
      - testflight
      - pre
      - rc
      - shipit
      - major
      - minor

jobs:
  - name: testflight
    public: true
    serial: true
    plan:
      - do:
        - { get: git, trigger: true }
        - task: test
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: (( grab meta.image.name ))
                tag:        (( grab meta.image.tag ))
            inputs:
              - name: git
                path: (( concat "gopath/src/" meta.go.module ))
            run:
              path: (( concat "./gopath/src/" meta.go.module "/ci/scripts/test" ))
              args: []
            params:
              MODULE: (( grab meta.go.module ))
        on_success:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: mainline tests job '$BUILD_JOB_NAME' succeeded.
            ok:      yes
            link:    (( grab meta.shout.links.build ))
        on_failure:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: mainline tests job '$BUILD_JOB_NAME' failed.
            ok:      no
            link:    (( grab meta.shout.links.build ))

  - name: pre
    public: true
    serial: true
    plan:
    - do:
      - aggregate:
          - { get: git,     trigger: true,  passed: [testflight] }
          - { get: version, trigger: true }
      - task: release-notes
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
              - { name: git }
          run:
            path: sh
            args:
            - -ce
            - |
              cd git
              if [ -f ci/release_notes.md ]; then
                echo "######   RELEASE NOTES   ###############"
                echo
                cat ci/release_notes.md
                echo
                echo "########################################"
                echo
              else
                echo "NO RELEASE NOTES HAVE BEEN WRITTEN"
                echo "You *might* want to do that before"
                echo "hitting (+) on that shipit job..."
                echo
              fi
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: release candidate job 'pre' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: release candidate job 'pre' failed (which is unusual).
          ok:      no
          link:    (( grab meta.shout.links.build ))

  - name: rc
    public: true
    serial: true
    plan:
    - do:
      - aggregate:
          - { get: git,     trigger: true,  passed: [pre] }
          - { get: version, trigger: false, passed: [pre], params: {pre: rc} }
      - put: version
        params: {file: version/number}
      on_success:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: release candidate job 'rc' succeeded.
          ok:      yes
          link:    (( grab meta.shout.links.build ))
      on_failure:
        put: notify
        params:
          topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
          message: release candidate job 'rc' failed (which is unusual).
          ok:      no
          link:    (( grab meta.shout.links.build ))

  - name: minor
    public: true
    plan:
      - do:
        - { get: version, trigger: false, params: {bump: minor} }
        - { put: version,                 params: {file: version/number} }
        on_success:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: minor version bump job 'minor' succeeded.
            ok:      yes
            link:    (( grab meta.shout.links.build ))
        on_failure:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: minor version bump job 'minor' failed (which is unusual).
            ok:      no
            link:    (( grab meta.shout.links.build ))

  - name: major
    public: true
    plan:
      - do:
        - { get: version, trigger: false, params: {bump: major} }
        - { put: version,                 params: {file: version/number} }
        on_success:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: major version bump job '$BUILD_JOB_NAME' succeeded.
            ok:      no
            link:    (( grab meta.shout.links.build ))
        on_failure:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: major version bump job '$BUILD_JOB_NAME' failed (which is unusual).
            ok:      no
            link:    (( grab meta.shout.links.build ))

  - name: shipit
    public: true
    serial: true
    plan:
      - do:
        - name: inputs
          aggregate:
            - { get: version, passed: [rc], params: {bump: final} }
            - { get: git,     passed: [rc] }
        - name: release
          task: release
          config:
            image_resource:
              type: docker-image
              source:
                repository: (( grab meta.image.name ))
                tag:        (( grab meta.image.tag ))
            platform: linux
            inputs:
              - name: version
              - name: git
                path: (( concat "gopath/src/" meta.go.module ))
            outputs:
              - name: gh
              - name: pushme
            run:
              path: (( concat "./gopath/src/" meta.go.module "/ci/scripts/shipit" ))
              args: []
            params:
              REPO_ROOT:    (( concat "gopath/src/" meta.go.module ))
              VERSION_FROM: version/number
              RELEASE_NAME: (( grab meta.release ))
              RELEASE_ROOT: gh
              REPO_OUT:     pushme
              BRANCH:       (( grab meta.github.branch ))
              GIT_EMAIL:    (( grab meta.git.email ))
              GIT_NAME:     (( grab meta.git.name ))
              GO_STATIC:    (( grab meta.go.static ))
        - name: git
          put: git
          params:
            rebase: true
            repository: pushme/git
        - name: github
          put: github
          params:
            name:   gh/name
            tag:    gh/tag
            body:   gh/notes.md
            globs: [gh/artifacts/*]
        - name: version-bump
          put: version
          params:
            bump: patch
        - name: notify
          aggregate:
          - put: notify
            params:
              method: announce
              file: notifications/message
              link: (( concat meta.github.uri "/releases" ))
        on_success:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: release job '$BUILD_JOB_NAME' succeeded.
            ok:      yes
            link:    (( grab meta.shout.links.build ))
        on_failure:
          put: notify
          params:
            topic:   (( concat meta.shout.topic "-$BUILD_JOB_NAME" ))
            message: release job '$BUILD_JOB_NAME' failed.
            ok:      no
            link:    (( grab meta.shout.links.build ))

resource_types:
  - name: shout-notification
    type: docker-image
    source:
      repository: huntprod/shout-resource

  - name: pull-request
    type: docker-image
    source:
      repository: jtarchie/pr

resources:
  - name: git
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))

  - name: version
    type: semver
    source :
      driver:            s3
      bucket:            (( grab meta.aws.bucket ))
      region_name:       (( grab meta.aws.region_name ))
      key:               version
      access_key_id:     (( grab meta.aws.access_key ))
      secret_access_key: (( grab meta.aws.secret_key ))
      initial_version:   (( grab meta.initial_version || "0.0.1" ))

  - name: notify
    type: shout-notification
    source:
      topic:    (( grab meta.shout.topic ))
      url:      (( grab meta.shout.url ))
      username: (( grab meta.shout.username ))
      password: (( grab meta.shout.password ))

  - name: github
    type: github-release
    source:
      user:         (( grab meta.github.owner ))
      repository:   (( grab meta.github.repo ))
      access_token: (( grab meta.github.access_token ))
