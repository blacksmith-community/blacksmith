name: Release

on:
  push:
    tags:
      - 'v*'
      - '[0-9]+.[0-9]+.[0-9]+'

env:
  GO_VERSION: '1.25'

jobs:
  validate-tag:
    name: Validate Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v?(.+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            # Remove 'v' prefix if present
            VERSION="${VERSION#v}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "Releasing version: ${VERSION}"
          else
            echo "Invalid tag format: ${GITHUB_REF}"
            exit 1
          fi

      - name: Validate tag is on main branch
        run: |
          # Fetch main branch
          git fetch origin main

          # Check if the tag is reachable from main
          if ! git merge-base --is-ancestor ${GITHUB_SHA} origin/main; then
            echo "Error: Tag is not on main branch"
            exit 1
          fi
          echo "Tag is on main branch ‚úì"

  run-checks:
    name: Run CI Checks
    uses: ./.github/workflows/ci.yml
    needs: validate-tag

  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-tag, run-checks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build release artifacts
        run: |
          VERSION=${{ needs.validate-tag.outputs.version }}
          echo "Building release artifacts for version ${VERSION}"
          make shipit VERSION=${VERSION}

      - name: Generate checksums
        run: |
          cd artifacts
          sha256sum *.tar.gz *.tar.bz2 blacksmith-darwin-* blacksmith-linux-* > checksums.sha256
          echo "Checksums:"
          cat checksums.sha256

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: artifacts/
          retention-days: 1

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, build-release]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: artifacts/

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${{ needs.validate-tag.outputs.version }}

          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # Generate release notes
          {
            echo "## Release v${VERSION}"
            echo ""
            echo "### üöÄ What's New"
            echo ""

            if [ -n "${PREV_TAG}" ]; then
              echo "### üìù Commits since ${PREV_TAG}"
              echo ""
              git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%an)" --no-merges
              echo ""
              echo ""
              echo "### üìä Statistics"
              echo ""
              echo "- **Commits**: $(git rev-list --count ${PREV_TAG}..HEAD)"
              echo "- **Contributors**: $(git log ${PREV_TAG}..HEAD --pretty=format:"%an" | sort -u | wc -l | tr -d ' ')"
              echo "- **Changed files**: $(git diff --name-only ${PREV_TAG}..HEAD | wc -l | tr -d ' ')"
            else
              echo "Initial release"
            fi

            echo ""
            echo "### üì¶ Release Artifacts"
            echo ""
            echo "| File | Description | SHA256 |"
            echo "|------|-------------|--------|"

            # Add descriptions for each artifact
            while IFS= read -r line; do
              checksum=$(echo "$line" | awk '{print $1}')
              filename=$(echo "$line" | awk '{print $2}')

              case "$filename" in
                blacksmith-darwin-arm64)
                  desc="macOS Apple Silicon (M1/M2/M3)"
                  ;;
                blacksmith-darwin-amd64)
                  desc="macOS Intel"
                  ;;
                blacksmith-linux-amd64)
                  desc="Linux AMD64"
                  ;;
                *.tar.gz)
                  desc="Server Distribution (includes UI and all platform binaries, gzip)"
                  ;;
                *.tar.bz2)
                  desc="Server Distribution (includes UI and all platform binaries, bzip2)"
                  ;;
                *)
                  desc="Binary"
                  ;;
              esac

              echo "| \`${filename}\` | ${desc} | \`${checksum:0:8}...\` |"
            done < artifacts/checksums.sha256

            echo ""
            echo "### üìã Installation"
            echo ""
            echo "#### Server Distribution"
            echo '```bash'
            echo "# Download gzip version (smaller, faster decompression)"
            echo "wget https://github.com/${{ github.repository }}/releases/download/v${VERSION}/blacksmith-${VERSION}.tar.gz"
            echo "tar -xzf blacksmith-${VERSION}.tar.gz"
            echo ""
            echo "# OR download bzip2 version (better compression)"
            echo "wget https://github.com/${{ github.repository }}/releases/download/v${VERSION}/blacksmith-${VERSION}.tar.bz2"
            echo "tar -xjf blacksmith-${VERSION}.tar.bz2"
            echo ""
            echo "# Extract contains platform-specific binaries:"
            echo "cd blacksmith-${VERSION}/"
            echo "ls blacksmith-*  # Shows: blacksmith-linux-amd64, blacksmith-darwin-amd64, blacksmith-darwin-arm64"
            echo ""
            echo "# Use the appropriate binary for your platform:"
            echo "./blacksmith-linux-amd64 --version    # For Linux"
            echo "./blacksmith-darwin-amd64 --version   # For macOS Intel" 
            echo "./blacksmith-darwin-arm64 --version   # For macOS Apple Silicon"
            echo '```'
            echo ""
            echo "#### macOS/Linux Binary"
            echo '```bash'
            echo "# Download the appropriate binary for your system"
            echo "# macOS Apple Silicon"
            echo "curl -LO https://github.com/${{ github.repository }}/releases/download/v${VERSION}/blacksmith-darwin-arm64"
            echo ""
            echo "# macOS Intel"
            echo "curl -LO https://github.com/${{ github.repository }}/releases/download/v${VERSION}/blacksmith-darwin-amd64"
            echo ""
            echo "# Linux AMD64"
            echo "curl -LO https://github.com/${{ github.repository }}/releases/download/v${VERSION}/blacksmith-linux-amd64"
            echo ""
            echo "# Make executable and verify"
            echo "chmod +x blacksmith-*"
            echo "./blacksmith-* --version"
            echo '```'
            echo ""
            echo "### üîí Verification"
            echo ""
            echo "Download the checksums file and verify your download:"
            echo '```bash'
            echo "curl -LO https://github.com/${{ github.repository }}/releases/download/v${VERSION}/checksums.sha256"
            echo "sha256sum -c checksums.sha256"
            echo '```'
          } > release_notes.md

          # Save to output
          echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Blacksmith v${{ needs.validate-tag.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/blacksmith-darwin-arm64
            artifacts/blacksmith-darwin-amd64
            artifacts/blacksmith-linux-amd64
            artifacts/blacksmith-*.tar.gz
            artifacts/blacksmith-*.tar.bz2
            artifacts/checksums.sha256
          fail_on_unmatched_files: true
          generate_release_notes: false

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate-tag, build-release]
    if: vars.DOCKER_REGISTRY != ''
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: artifacts/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-tag.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-tag.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-tag.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate-tag.outputs.version }}

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [validate-tag, create-release]
    if: success()
    steps:
      - name: Send success notification
        run: |
          echo "üéâ Release v${{ needs.validate-tag.outputs.version }} created successfully!"
          echo "View release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-tag.outputs.version }}"
